This source distribution allows you to build the core CDAT components
(cdms, cdutil, genutil, unidata and a couple of other packages) as a
python egg.

The source is self contained but is kept in sync with the latest
version of CDAT in the BADC Subversion repository.  The version string
should correspond to one of the subdirectories of $SROOT/CDAT/tags.

== What you need ==

1. A python 2.4 installation with distutils installed.  You cannot
   build or run the egg without distutils.  If your python has been
   installed by a unix package manager then you may have to install
   the python-devel package.
   
  To test do the following:

    $ python
    
    Python 2.4.1 (#1, Sep 13 2005, 00:39:20)
    [GCC 4.0.2 20050901 (prerelease) (SUSE Linux)] on linux2
    Type "help", "copyright", "credits" or "license" for more information.
    >>> import distutils
    Traceback (most recent call last):
      File "<stdin>", line 1, in ?
    ImportError: No module named distutils
    >>>

  Here you are unlucky and need to install python-devel.

2. An internet connection.  The setup script will attempt to download
   the setuptools egg.  If you don't have web access setup.py will tell
   you where to get the file you need.

3. Numeric.  Setuptools currently has problems automatically downloading
   the Numeric package.  Setup.py will complain if it isn't available.

== Procedure ==

1. Run the setup.py script, passing it the bdist_egg command:

  $ python setup.py bdist_egg

  The setuptools egg will be downloaded to the distribution directory.
  Libcdms will be built and the core cdat packages will be built and
  packeged into an egg in the dist subdirectory.

2. Add eggs to your python path

  $ export PYTHONPATH=$PWD/setuptools-*.egg:$PWD/dist/cdat_lite-*.egg

  You need to expand the wildcards manually as python won't do it for
  you.  Naturally you can move the eggs to anywhere you like.

That's it!  You should be able to import cdms and open NetCDF and PP files.

== Alternative Installation ==

As usual you can install cdat_lite in your python with

$ python setup.py install

If you want to experiment with your installation locally without
mucking about with PYTHONPATH I recomend the virtual-python.py script.  Do

$ python ./virtual-python.py --prefix=<some-path>

to create a symbolically linked duplicate of your python at <some-path>/bin/python.  You
can then use that executable to install packages just in <some-path>.


== Using CDMS scripts ==

cdat_lite includes the libcdms script cdscan within the egg.  You have
several options to get at it.

1. Install the egg with easy_install

  When you install eggs the setuptools way (rather than just putting them on
  your PYTHONPATH) scripts stubs that call the code in the egg are
  created automatically.  Therefore, assuming you can write to your default
  python installation directory:

  $ ez_setup.py
  $ easy_install cdat_lite*.egg
  $ cdscan ...

2. Import cdscan as a module from within python

  >>> import cdat_scripts.cdscan as cdscan
  >>> cdscan.main(['cdscan', '-x', 'dataset.xml', filename, ...])

  The argument to main() must be the equivilent of sys.argv when run
  from the command line, i.e. the first element should be a pseudo
  command name.

3. Import a cdscan entry point using the pkg_resources API.

  This is the way scripts are supposed to be found from within eggs and is
  used by easy_install to automatically create script stubs.

  >>> import pkg_resources
  >>> cdscan = pkg_resources.load_entry_point('cdat_lite', 'console_scripts', 'cdscan')
  >>> cdscan()

  In this case sys.argv must be set to the arguments you want.

