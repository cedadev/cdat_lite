.\" $id$
.TH cddrs 3 "25 January 1995" "LLNL" "CDMS FORTRAN DRS wrapper functions"
.SH NAME
cddrs \- CDMS FORTRAN DRS wrapper functions for accessing DRS, GrADS (GRIB), and
netCDF datafiles. 
.SH SYNOPSIS (FORTRAN ROUTINES)
.ft B
.na
.nh
.HP
#include "drsdef.h"
.RS 0
.br
#include "fcddrs.h"
.sp 1
.HP 6
integer function cw_aslun(lu, dictfil, lud, datfil, istat)
.RS 0
.br
integer lu
.br
character*1024 dictfil (Unix), character*248 dictfil (Cray)
.br
integer lud
.br
character*1024 datfil (Unix), character*248 datfil (Cray)
.RE
.HP
.sp 1
integer function cw_cllun(lu)
.RS 0
.br
integer lu
.RE
.sp 1
.HP
integer function cw_cluvdb(void)
.RS 0
.br
.RE
.sp 1
.HP
logical function cw_drstest(ierr)
.RS 0
.br
integer ierr
.RE
.sp 1
.HP
integer function cw_getdat(lu, a, isize)
.RS 0
.br
integer lu
.br
real a(*)
.br
integer isize
.RE
.sp 1
.HP
integer function cw_getcdim(idim, source, name, title, units, dtype, reqlen, var, retlen)
.RS 0
.br
integer idim
.br
character*120 source
.br
character*16 name
.br
character*80 title
.br
character*40 units
.br
integer dtype
.br
integer reqlen
.br
real var(*)
.br
integer retlen
.RE
.sp 1
.HP
integer function cw_getedim(idim, dsrc, dna, dti, dun, dtype, dlen, df, dl)
.RS 0
.br
integer idim
.br
character*120 dsrc
.br
character*16 dna
.br
character*80 dti
.br
character*40 dun
.br
integer dtype
.br
integer dlen
.br
real df
.br
real dl
.RE
.sp 1
.HP
integer function cw_getelemd(etype, bpe)
.RS 0
.br
integer etype
.br
integer bpe
.RE
.sp 1
.HP
integer function cw_getname(source, name, title, units, date, time, typed, nd)
.RS 0
.br
character*120 source
.br
character*16 name
.br
character*80 title
.br
character*40 units
.br
character*8 date
.br
character*8 time
.br
character*8 typed
.br
integer nd
.RE
.sp 1
.HP
integer function cw_getnd(nd)
.RS 0
.br
integer nd
.RE
.sp 1
.HP
integer function cw_getrge2(lu, idim, elem1, elem2, ind1, ind2, dlow, dhigh)
.RS 0
.br
integer lu
.br
integer idim
.br
real elem1
.br
real elem2
.br
integer ind1
.br
integer ind2
.br
real dlow
.br
real dhigh
.RE
.sp 1
.HP
integer function cw_getslab(lu, rank, order, fe, le, cycle, data, datadim)
.RS 0
.br
integer lu
.br
integer rank
.br
integer order(rank)
.br
real fe(rank)
.br
real le(rank)
.br
real cycle(rank)
.br
real data(*)
.br
real datadim(rank)
.RE
.sp 1
.HP
integer function cw_inqdict(lu, oper)
.RS 0
.br
integer lu
.br
integer oper
.RE
.sp 1
.HP
integer function cw_inqlun(lu, datafile, nvar, version)
.RS 0
.br
integer lu
.br
character*1024 datafile (Unix), character*248 (Cray)
.br
integer nvar
.br
real version
.RE
.sp 1
.HP
integer function cw_majority(majority)
.RS 0
.br
integer majority
.RE
.sp 1
.HP
integer function cw_setdim(n, dna, dun, idim, df, dl)
.RS 0
.br
integer n
.br
character*16 dna
.br
character*40 dun
.br
integer idim
.br
real df
.br
real dl
.RE
.sp 1
.HP
integer function cw_seterr(ierrlun, reportlevel)
.RS 0
.br
integer ierrlun
.br
integer reportLevel
.RE
.sp 1
.HP
integer function cw_setname(source, name, title, units, typed)
.RS 0
.br
character*120 source
.br
character*16 name
.br
character*80 title
.br
character*40 units
.br
character*8 typed
.RE
.sp 1
.HP
integer function cw_setvdim(n, dso, dna, dti, dun, df, dl)
.RS 0
.br
integer n
.br
character*120 dso
.br
character*16 dna
.br
character*80 dti
.br
character*40 dun
.br
real df
.br
real dl
.RE
.ad
.hy
.SH "DESCRIPTION"
These routines provide read-only access to data in DRS,
netCDF, and GrADS (GRIB) format. For backward compatibility, the routines are identical to
the read and inquiry routines in the DRS library, prefixed with \fIcw_\fP. One routine,
\fIcw_majority\fP, has no counterpart in DRS.

In general, any return argument which is set to NULL (0) will be ignored.
Additionally, the following values are treated as null values for input arguments:
.LP
.PD 0
.TP 20
.B CW_STRING_NULL
null string
.TP
.B CW_FLOAT_NULL
null float
.TP
.B CW_NULL_INT
null integer argument
.PD
.SH "FUNCTION DESCRIPTIONS"
.LP
.HP 4
\fBinteger function cw_aslun(\fIlu\fB, \fIdictfil\fB, \fIlud\fB, \fIdatfil\fB, \fIistat\fB)\fR
.sp

.sp
Open a DRS, netCDF, GrADS, or GRIB file. \fIlu\fP and \fIlud\fP are the
FORTRAN logical units to be associated with the dictionary file and data
file respectively. For subsequent calls, the dictionary file \fIlu\fP is
used to identify the file. \fIdictfil\fP and \fIdatfil\fP are the pathnames of the
dictionary and data file, respectively. 

For netCDF files, only the dictionary file \fIlu\fP and \fIdictfil\fP 
are specified; \fIlud\fP and \fIdatfil\fP are ignored. Similarly, for GrADS files, \fIlu\fP is specified, and
\fIdictfil\fP is the pathname of the GrADS control file; the \fIlud\fP and
\fIdatfil\fP parameters are ignored.

\fIistat\fP is either IDRS_READ or IDRS_EXTEND.

The function returns 0 on success, a non-zero status on failure.
.HP
\fBinteger function cw_cllun(\fIlu\fB)\fR
.sp
Close a file. \fIlu\fP is the logical unit of the dictionary file.
.HP
\fBinteger function cw_cluvdb(void)\fR
.sp
Reset the VDB to null values.
.HP
\fBlogical function cw_drstest(\fIierr\fB)\fR
.sp
Test for a fatal error. The function returns true if the error number \fIierr\fP is fatal, false otherwise.
.HP
\fBinteger function cw_getdat(\fIlu\fB, \fIvar\fB, \fIisize\fB)\fR
.sp
Read data for a variable. \fIlu\fP is the dictionary logical unit. Data is returned
in \fIvar\fP. \fIisize\fP is size of \fIvar\fP in bytes.

The name of the variable to read is specified with \fBcw_setname\fP. The
range and ordering of the data to be read are specified by one or more calls to
\fBcw_setdim\fP and \fBcw_setvdim\fP.
.HP
\fBinteger function cw_getcdim(\fIidim\fB, \fIsource\fB, \fIname\fB,
\fItitle\fB, \fIunits\fB, \fIdtype\fB, \fIreqlen\fB,
\fIvar\fB, \fIretlen\fB)\fR
.sp
Get dimension values and name strings for a dimension. \fIidim\fP is the
1-origin dimension number. The function returns the \fIsource\fP (comment) string,
variable \fIname\fP, long \fItitle\fP, and variable
\fIunits\fP. The dimension type \fIdtype\fP is returned as
IDRS_EQUALLY_SPACED or IDRS_VECTOR. \fIreqlen\fP is the maximum
number of elements to be retrieved. Dimension values are returned in
\fIvar\fP, provided that reqlen is sufficiently large. \fIretlen\fP is set
to the actual number of elements returned.
.HP
\fBinteger function cw_getedim(\fIidim\fB, \fIsource\fB, \fIname\fB, \fItitle\fB, \fIunits\fB, \fIdtype\fB, \fIidim\fB, \fIdf\fB, \fIdl\fB)\fR
.sp
Get dimension limits and name strings for a dimension. \fIidim\fP is the
1-origin dimension number. The function returns the \fIsource\fP (comment)
string, variable \fIname\fP, long \fItitle\fP, and variable
\fIunits\fP. The dimension type \fIdtype\fP is returned as
IDRS_EQUALLY_SPACED or IDRS_VECTOR. \fIdlen\fP is the length of the
dimension. \fIdf\fP and \fIdl\fP are returned as the first and last values,
respectively, of dimension \fIidim\fP of the variable just read or
inquired.
.HP
\fBinteger function cw_getelemd(\fItype\fB, \fIbpe\fB)\fR
.sp
Retrieve the variable datatype description. 
\fIbpe\fP is the number of bytes per element as defined on the current host.
\fItype\fP is returned as one
of the following:
.sp
.RS
.PD 0
.TP 20
.B IDRS_ASCII
ASCII characters
.TP
.B IDRS_CRAY_R16
Cray 16-byte floating-point
.TP
.B IDRS_CRAY_R8
Cray 8-byte floating-point
.TP
.B IDRS_I1
one-byte integer
.TP
.B IDRS_I2
two-byte integer
.TP
.B IDRS_I4
four-byte integer
.TP
.B IDRS_I8
eight-byte integer
.TP
.B IDRS_IEEE_R16
IEEE 16-byte floating-point
.TP
.B IDRS_IEEE_R4
IEEE four-byte floating-point
.TP
.B IDRS_IEEE_R8
IEEE eight-byte floating-point
.TP
.B IDRS_USER
user-defined
.PD
.RE
.HP
\fBinteger function cw_getname(\fIsource\fB, \fIname\fB, \fItitle\fB, \fIunits\fB, \fIdate\fB, \fItime\fB, \fItyped\fB, \fInd\fB)\fR
.sp
Get the \fIsource\fP, \fIname\fP, \fItitle\fP, and \fIunits\fP of the
variable just read or inquired. \fIdate\fP and \fItime\fP are the date and
time at which the variable was written. \fItyped\fP is the datatype of the
variable, as it will (by default) be retrieved. \fInd\fP is the number of
dimensions of the variable. 
.HP
\fBinteger function cw_getnd(\fInd\fB)\fR
.sp
Get the number of dimensions, \fInd\fP, of the current variable.
.HP
\fBinteger function cw_getrge2(\fIlu\fB, \fIidim\fB, \fIelem1\fB, \fIelem2\fB, \fIind1\fB, \fIind2\fB, \fIdlow\fB, \fIdhigh\fB)\fR
.sp
Map a range of coordinates to a range of indices. \fIlu\fP is the logical
unit for the current variable. \fIidim\fP is the 1-origin dimension number.
\fIelem1\fP and \fIelem2\fP are the endpoints of the range of coordinates
to be mapped. \fIind1\fP and \fIind2\fP are set to corresponding first and last indices
for the specified coordinate range. The actual
coordinate range that DRS would retrieve is [\fIdlow\fP,\fIdhigh\fP].
.HP
\fBinteger function cw_getslab(\fIlu\fB, \fIrank\fB, \fIorder\fB, \fIfe\fB, \fIle\fB, \fIcycle\fB, \fIdata\fB, \fIdatadim\fB)\fR
.sp
Read data for a variable, with optional wraparound. \fIlu\fP is the
dictionary logical unit. \fIorder\fP is an array, of length \fIrank\fP,
specifying how the dimensions are to be transposed on data
retrieval. Dimension numbers are 1-origin; \fIorder[i]\fP specifies the
i-th file 
dimension to be retrieved. If \fIorder\fP = [1,2,...,rank], then the data
will be read with the same dimension order as in the file.

\fIfe\fP is an array, of length \fIrank\fP, of the first coordinate of
each dimension range; \fIf[i]\fP corresponds to file dimension
\fIorder[i]\fP. Similarly, \fIle\fP is the array, of length \fIrank\fP, of
coordinates of the last elements of the dimension range, for each
dimension. 

\fIcycle\fP is the array of cycle lengths for each dimension.
If \fIcycle[i]\fP is nonzero, the ith (user) dimension is treated as
circular, with length \fIcycle[i]\fP. For example, a longitude dimension
which is written in the file with range 0.0 to 359.0 can be retrieved with
a range \fIfe[i]\fP=-180.0, \fIle[i]\fP=180.0, and cycle[i]=360.0. Note that wraparound
and retrieval of duplicate data at the endpoints are handled
correctly. Set \fIcycle[i]\fP to 0.0 to specify no wraparound in the i-th
(user) dimension.
Data is returned
in \fIvar\fP.

\fIdatadim\fP is an array of length \fIrank\fP, whose i-th element is the
length of the i-th user dimension of \fIvar\fP. \fIdatadim[i]\fP can be
larger than the number of elements actually retrieved into the i-th dimension.
This permits a multi-dimensional \fIvar\fP array to be statically
allocated, if desired.
.HP
\fBinteger function cw_inqdict(\fIlu\fB, \fIoper\fB)\fR
.sp
Inquire a variable. If \fIoper\fP is IDRS_GETFIRSTVAR, the VDB is set for
the first variable that matches the naming information specified in the
most recent \fBcw_setname\fP call. If \fIoper\fP is IDRS_GETNEXTVAR, the
VDB is set for the next matching variable.

The function returns 0 on success, IDRS_NOMOREVARS if no matching variable
was found, or a non-zero status on failure.
.HP
\fBinteger function cw_inqlun(\fIlu\fB, \fIdatafile\fB, \fInvar\fB, \fIversion\fB)\fR
.sp
Inquire a file. \fIdatafile\fP is the name of the associated datafile (DRS,
GrADS, GRIB). \fInvar\fP is the number of variables in the file.
\fIversion\fP is the version number of the file format.
.HP
\fBinteger function cw_majority(\fImajority\fB)\fR
.sp
Set the data majority. By default, \fBcddrs\fP follows the FORTRAN majority
convention : the first dimension varies most rapidly. Consequently, in C
programs, dimension numbers are reversed with respect to the actual
dimensions of a multi-dimensional variable. Calling \fBcw_majority\fP with
\fImajority\fP CW_C_MAJORITY cause \fBcddrs\fP to follow the C majority
convention - the first dimension varies least rapidly. \fImajority\fP is
either CW_C_MAJORITY or CW_FORTRAN_MAJORITY (default).
.HP
\fBinteger function cw_setdim(\fIn\fB, \fIdna\fB, \fIdun\fB, \fIidim\fB, \fIdf\fB, \fIdl\fB)\fR
.sp
Specify the range of values to be read for a dimension. \fIn\fP is the
1-origin dimension number. \fIdna\fP is the name of the dimension.
\fIdun\fP is the (optional) units field. \fIidim\fP is for backward
compatibility only, and should be set to 0.
\fIdf\fP and \fIdl\fP are the first and last values of the range of values
to be read.

.HP
\fBinteger function cw_seterr(\fIierrlun\fB, \fIreportlevel\fB)\fR
.sp
Set the error reporting level. \fIreportlevel\fP may be set to IDRS_NOREPORT to
suppress error reporting, or IDRS_\fIWARNING\fP to report errors.
\fIierrlun\fP is provided for backward compatibility only; all errors are
written to stderr.
.HP
\fBinteger function cw_setname(\fIsource\fB, \fIname\fB, \fItitle\fB, \fIunits\fB, \fItyped\fB)\fR
.sp
Specify the name and (optionally) the other name fields of the variable to
be read. \fIname\fP is the name of the variable to be read. \fIsource\fP,
\fItitle\fP, and \fIunits\fP may be specified, but must match the
corresponding field of the variable if specified. \fItyped\fP is the
requested datatype of the variable. An error occurs if the data cannot be
returned as the requested type.
.HP
\fBinteger function cw_setvdim(\fIn\fB, \fIdso\fB, \fIdna\fB, \fIdti\fB, \fIdun\fB, \fIdf\fB, \fIdl\fB)\fR
.sp
Specify the range of values to be read for a dimension. \fIn\fP is the
1-origin dimension number. \fIdna\fP is the name of the dimension.
\fIdso\fP, \fIdti\fP, and \fIdun\fP are optional source, title, and units
fields. If specified, they must match exactly the corresponding
variable fields.
\fIdf\fP and \fIdl\fP are the first and last values of the range of values
to be read.
.SH "PORTING FROM DRS"
Since the template of each \fBcddrs\fP call is identical to its DRS counterpart,
porting a code with DRS calls to \fBcddrs\fP consists of prefixing all DRS
read and inquiry routines with "\fBcw_\fP"; the arguments need not be
modified. This can be accomplished most readily, \fBif there are no
write routines in the source file\fP, by including "drsdef.h" and "fcddrs.h" in every
routine that calls a cddrs function, and compiling with the option
\fB-DCDCOMPAT\fP. This causes all DRS FORTRAN routines to be redefined, by the 
preprocessor, to their \fBcddrs\fP equivalent.

If any of the following routines appear within the source file, the above
option should not be used: \fBputdat\fP, \fBputdic\fP, \fBputvdim\fP,
\fBsetdate\fP, or \fBsetrep\fP.
.SH FILES
.PD 0
.TP 30
.B $PCMDI/include/fcddrs.h
FORTRAN cddrs include file
.TP
.B $PCMDI/lib/libcdms.a
CDMS library
.TP
.B $PCMDI/lib/libdrs.a
DRS library
.PD
.SH COMPILATION
The following illustrates the basic compilation and link command:
.LP
.RS
.nf
.ft B
f77 -w -I$PCMDI/include -o prog prog.F -L$PCMDI/lib -lcdms -ldrs \\
	-L/usr/local/netcdf-2.3.2/libsrc -lnetcdf
.ft
.RE
.fi
.LP
This illustrates use of the compatibility flag:
.LP
.RS
.nf
.ft B
f77 -w -I$PCMDI/include -DCDCOMPAT -o prog prog.F -L$PCMDI/lib -lcdms -ldrs \\
	-L/usr/local/netcdf-2.3.2/libsrc -lnetcdf
.ft
.RE
.fi
.SH "SEE ALSO"
.BR cdunif (3),
.BR cddrs (3).
.SH "BUGS"
C*n datatypes for n greater than 1 are not properly handled.

Output routines should be incorporated for ease of porting.

